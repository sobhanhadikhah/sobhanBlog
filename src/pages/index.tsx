/* eslint-disable @typescript-eslint/no-unsafe-return */
/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable react-hooks/exhaustive-deps */
/* eslint-disable @typescript-eslint/no-floating-promises */
import Head from 'next/head';
import Cart from '~/components/elemnt/cart';
import { api } from '~/utils/api';
import { type ReactNode, useState } from 'react';
import { type Post } from '~/types/post/index.';
import { useInView } from 'react-intersection-observer';
import 'react-loading-skeleton/dist/skeleton.css';
import Skeleton, { SkeletonTheme } from 'react-loading-skeleton';
import Link from 'next/link';
import MainLayout from '~/components/layouts/main';
import { useSession } from 'next-auth/react';
import Sort from '~/components/sort';
import SkeletonLoading from '~/components/skeletonLoading';
import Image from 'next/image';
import { Flex, ScrollArea, Text } from '@radix-ui/themes';

export default function Home() {
  const { status: sessionStatus } = useSession();
  const unAuthorized = sessionStatus === 'unauthenticated';
  const { ref } = useInView({
    onChange(inView) {
      if (inView && page < totalPage - 1) {
        void handleFetchNextPage();
      }
    },
  });
  /* ['post.getAll', { limit: 10, order: sort || undefined }], */
  const [sort, setSort] = useState('');
  const [page, setPage] = useState(0);
  const [totalPage, setTotalPage] = useState(0);

  const { refetch, isLoading, fetchNextPage, data } = api.post.getAll.useInfiniteQuery(
    {
      limit: 30,
      order: sort || undefined,
    },
    {
      queryKey: ['post.getAll', { limit: 30, order: sort || undefined }],
      refetchOnWindowFocus: false,
      getNextPageParam: (lastPage, pages) => {
        if (Math.ceil(lastPage.count / 30) > pages.length) return lastPage.nextCursor;
        return undefined;
      },
      onSuccess(data) {
        setTotalPage(data?.pages[page]?.totalPages ?? 0);
      },
    },
  );
  //@ts-ignore
  const posts: Post[] = data?.pages.reduce((acc, page) => {
    return [...acc, ...page.posts];
  }, []);

  const handleFetchNextPage = async () => {
    setPage((prev) => prev + 1);

    await fetchNextPage();
  };

  const { data: tagsData, isLoading: isLoadingTags } = api.tag.getAllTagResult.useQuery();
  function handleSetSort(value: string) {
    {
      if (value !== sort) {
        setSort(value);
        setPage(0);
      }
    }
  }
  return (
    <>
      <Head>
        <title>iBlog</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
        <meta
          name="google-site-verification"
          content="cxcDaYiPO_9_2-UFokX7gIdlD1v6BBBsV2mMxA8yL2I"
        />
      </Head>
      {/* {unAuthorized ? <MyModal /> : null} */}

      <div className="grid grid-cols-12 gap-3 overflow-hidden rounded-sm ">
        {/* tags */}
        <div className="col-span-3 hidden flex-col md:flex ">
          <div className="z-[300] flex max-h-[800px] min-h-[400px] flex-col  gap-3 overflow-auto bg-black p-3 ">
            <div>
              <h2 className="text-lg font-semibold">Tags</h2>
            </div>
            {isLoadingTags
              ? Array(6)
                  .fill('id')
                  .map((item, index) => (
                    <SkeletonTheme
                      key={`skeleton${index}`}
                      height={411}
                      baseColor="#202020"
                      highlightColor="#444">
                      <Skeleton height={10} width={200} />
                    </SkeletonTheme>
                  ))
              : tagsData?.map((item) => (
                  <Link
                    href={`/t/${item.id}`}
                    key={item.id}
                    className="flex w-full justify-between gap-3 rounded-md p-1 px-3 text-gray-100  transition-all duration-150 hover:bg-[#1f1f1f]">
                    <span>{item.label}</span> <span>{item._count.posts}</span>
                  </Link>
                ))}
          </div>
        </div>
        <div className="col-span-12 grid h-full grid-cols-12 items-start gap-y-2  overflow-auto md:col-span-7">
          {/* sort */}
          <Sort setSort={handleSetSort} sort={sort} />
          <div className="relative col-span-12 flex gap-5  overflow-visible ">
            <ScrollArea type="always" scrollbars="horizontal">
              <div className="flex gap-1 md:hidden  ">
                {isLoadingTags
                  ? Array(6)
                      .fill('id')
                      .map((item, index) => (
                        <SkeletonTheme
                          key={`skeleton${index}`}
                          height={411}
                          baseColor="#202020"
                          highlightColor="#444">
                          <Skeleton height={10} width={200} />
                        </SkeletonTheme>
                      ))
                  : tagsData?.map((item) => (
                      <Link
                        href={`/t/${item.id}`}
                        key={item.id}
                        className="flex gap-3   rounded-full bg-[#171717] p-1 px-4 text-gray-100  transition-all duration-150 hover:bg-[#1f1f1f]">
                        <span>#{item.label}</span>
                      </Link>
                    ))}
              </div>
            </ScrollArea>
          </div>
          {/* posts */}
          {!isLoading && posts
            ? posts?.map((item) => <Cart refetch={refetch} key={item.id} {...item} />)
            : Array(6)
                .fill('id')
                .map((item, index) => <SkeletonLoading key={`skeleton${index}`} />)}
          {!isLoading && totalPage !== page ? (
            <div
              className="col-span-1 flex items-center justify-center p-4 py-3 sm:col-span-2 md:col-span-3"
              ref={ref}
            />
          ) : null}
        </div>
        {/* banner */}
        {/* <div className="col-span-2 hidden w-full px-1 md:flex">
          <a
            target="_blank"
            href={'https://mahak-charity.org/online-payment/'}
            style={{ width: '100%' }}
            className="relative col-span-12 mt-10 aspect-video max-h-[400px] w-full ">
            <Image
              className="rounded-lg shadow-md shadow-slate-300 "
              fill
              alt="kany"
              src={'https://sobhanblog.storage.iran.liara.space/banner/banner.jpg'}
            />
          </a>
        </div> */}
      </div>
    </>
  );
}
Home.getLayout = function getLayout(page: ReactNode) {
  return <MainLayout>{page}</MainLayout>;
};
